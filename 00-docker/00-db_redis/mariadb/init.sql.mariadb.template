-- 사용자 생성
CREATE USER IF NOT EXISTS '${PASSKEY_DB_USER}'@'%' IDENTIFIED BY '${PASSKEY_DB_PW}';

-- 데이터베이스 생성
CREATE DATABASE IF NOT EXISTS passkey;
CREATE DATABASE IF NOT EXISTS passkey_portal;
CREATE DATABASE IF NOT EXISTS passkey_admin;

-- 권한 부여
GRANT ALL PRIVILEGES ON passkey.* TO '${PASSKEY_DB_USER}'@'%';
GRANT ALL PRIVILEGES ON passkey_portal.* TO '${PASSKEY_DB_USER}'@'%';
GRANT ALL PRIVILEGES ON passkey_admin.* TO '${PASSKEY_DB_USER}'@'%';

-- 권한 적용
FLUSH PRIVILEGES;

-- ===========================================
-- passkey 데이터베이스에 대한 테이블 생성
-- ===========================================
USE passkey;

-- ===========================================
-- Credential Status Table
-- ===========================================
CREATE TABLE IF NOT EXISTS credential_status (
    mapping_id                 VARCHAR(255)  NOT NULL,
    rp_id                      VARCHAR(255)  NOT NULL,
    active                     TINYINT(1)    NOT NULL,
    backup_state               TINYINT(1)    NOT NULL,
    credential_id              VARCHAR(1500) NOT NULL,
    fail_count                 BIGINT        NOT NULL,
    last_authenticated         TIMESTAMP     NULL DEFAULT NULL,
    last_authentication_failed TIMESTAMP     NULL DEFAULT NULL,
    last_status_changed        TIMESTAMP     NULL DEFAULT NULL,
    registration_date          TIMESTAMP     NULL DEFAULT NULL,
    sign_count                 BIGINT        NOT NULL,
    success_count              BIGINT        NOT NULL,
    PRIMARY KEY (mapping_id, rp_id)
);

CREATE INDEX idx_credential_status_active
    ON credential_status (active);

CREATE INDEX idx_credential_status_registration_date
    ON credential_status (registration_date);

CREATE INDEX idx_credential_status_last_authenticated
    ON credential_status (last_authenticated);


-- ===========================================
-- Issued Options Table
-- ===========================================
CREATE TABLE IF NOT EXISTS issued_options (
    transaction_id       VARCHAR(255)  NOT NULL PRIMARY KEY,
    expire_time          TIMESTAMP     NULL DEFAULT NULL,
    issue_time           TIMESTAMP     NULL DEFAULT NULL,
    operation_type       VARCHAR(255)  NULL DEFAULT NULL,
    pub_key_cred_options VARCHAR(8192) NULL DEFAULT NULL,
    rp_id                VARCHAR(255)  NOT NULL,
    user_id              VARCHAR(255)  NULL DEFAULT NULL
);

CREATE INDEX idx_issued_options_time
    ON issued_options (issue_time, expire_time);


-- ===========================================
-- Metadata Table
-- ===========================================
CREATE TABLE IF NOT EXISTS metadata (
    id                         BIGINT       AUTO_INCREMENT PRIMARY KEY,
    aaguid                     VARCHAR(255) NULL DEFAULT NULL,
    certificate_key_id         VARCHAR(255) NULL DEFAULT NULL,
    metadatablobentryjson      LONGTEXT     NOT NULL,
    time_of_last_status_change DATE         NULL DEFAULT NULL,
    type                       VARCHAR(255) NULL DEFAULT NULL
);

CREATE INDEX idx_metadata_aaguid
    ON metadata (aaguid);

CREATE INDEX idx_metadata_certificate_key_id
    ON metadata (certificate_key_id);


-- ===========================================
-- Metadata Version Table
-- ===========================================
CREATE TABLE IF NOT EXISTS metadata_version (
    id           BIGINT    AUTO_INCREMENT PRIMARY KEY,
    no           INT       NOT NULL,
    next_update  DATE      NULL DEFAULT NULL,
    metadatablob LONGTEXT  NULL DEFAULT NULL,
    last_checked TIMESTAMP NULL DEFAULT NULL,
    last_updated TIMESTAMP NULL DEFAULT NULL
);


-- ===========================================
-- Origin Table
-- ===========================================
CREATE TABLE IF NOT EXISTS origin (
    id     BIGINT       AUTO_INCREMENT PRIMARY KEY,
    origin VARCHAR(255) NOT NULL
);


-- ===========================================
-- Policy Table
-- ===========================================
CREATE TABLE IF NOT EXISTS policy (
    id                                  BIGINT       AUTO_INCREMENT PRIMARY KEY,
    acceptable_authenticators           VARCHAR(255) NULL DEFAULT NULL,
    disallowed_authenticators           VARCHAR(255) NULL DEFAULT NULL,
    allow_certified_authenticators_only TINYINT(1)   NULL DEFAULT NULL,
    enforce_attestation                 TINYINT(1)   NULL DEFAULT NULL,
    acceptable_attestation_types        VARCHAR(255) NULL DEFAULT NULL
);


-- ===========================================
-- RP (Relying Party) Table
-- ===========================================
CREATE TABLE IF NOT EXISTS rp (
    id                     VARCHAR(255) NOT NULL PRIMARY KEY,
    authentication_enabled TINYINT(1)   NULL DEFAULT NULL,
    name                   VARCHAR(255) NOT NULL,
    registration_enabled   TINYINT(1)   NULL DEFAULT NULL,
    policy_id              BIGINT       NULL DEFAULT NULL,
    CONSTRAINT fk_rp_policy FOREIGN KEY (policy_id)
        REFERENCES policy(id) ON DELETE SET NULL
);


-- ===========================================
-- Default Options Table
-- ===========================================
CREATE TABLE IF NOT EXISTS default_options (
    id                                        BIGINT       AUTO_INCREMENT PRIMARY KEY,
    creation_authenticator_attachment         VARCHAR(255) NULL DEFAULT NULL,
    creation_resident_key                     VARCHAR(255) NULL DEFAULT NULL,
    creation_timeout_for_uv_discouraged_in_ms BIGINT       NULL DEFAULT NULL,
    creation_timeout_in_ms                    BIGINT       NULL DEFAULT NULL,
    creation_user_verification                VARCHAR(255) NULL DEFAULT NULL,
    request_timeout_for_uv_discouraged_in_ms  BIGINT       NULL DEFAULT NULL,
    request_timeout_in_ms                     BIGINT       NULL DEFAULT NULL,
    request_user_verification                 VARCHAR(255) NULL DEFAULT NULL,
    rp_id                                     VARCHAR(255) NULL DEFAULT NULL,
    CONSTRAINT fk_default_options_rp FOREIGN KEY (rp_id)
        REFERENCES rp(id) ON DELETE CASCADE
);


-- ===========================================
-- RP Origins Table
-- ===========================================
CREATE TABLE IF NOT EXISTS rp_origins (
    rp_id      VARCHAR(255) NOT NULL,
    origins_id BIGINT       NOT NULL UNIQUE,
    CONSTRAINT fk_rp_origins_rp FOREIGN KEY (rp_id) REFERENCES rp(id) ON DELETE CASCADE,
    CONSTRAINT fk_rp_origins_origin FOREIGN KEY (origins_id) REFERENCES origin(id) ON DELETE CASCADE
);


-- ===========================================
-- Users Table
-- ===========================================
CREATE TABLE IF NOT EXISTS users (
    rp_id                      VARCHAR(255) NOT NULL,
    user_id                    VARCHAR(255) NOT NULL,
    success_count              BIGINT       NULL DEFAULT NULL,
    fail_count                 BIGINT       NULL DEFAULT NULL,
    registration_date          TIMESTAMP    NULL DEFAULT NULL,
    first_authenticated        TIMESTAMP    NULL DEFAULT NULL,
    last_authenticated         TIMESTAMP    NULL DEFAULT NULL,
    last_authentication_failed TIMESTAMP    NULL DEFAULT NULL,
    PRIMARY KEY (rp_id, user_id)
);

CREATE INDEX users_registration_date_index
    ON users (registration_date);

CREATE INDEX users_last_authenticated_index
    ON users (last_authenticated);


-- ===========================================
-- Credential Table
-- ===========================================
CREATE TABLE IF NOT EXISTS credential (
    mapping_id                   VARCHAR(255)  NOT NULL,
    rp_id                        VARCHAR(255)  NOT NULL,
    aaguid                       VARCHAR(36)   NULL DEFAULT NULL,
    attestation_format           VARCHAR(255)  NULL DEFAULT NULL,
    attestation_type_in_used     VARCHAR(255)  NULL DEFAULT NULL,
    cid_index                    VARCHAR(32)   NOT NULL,
    cose_public_key              LONGBLOB      NOT NULL,
    credential_id                VARCHAR(1500) NOT NULL,
    discoverable_credential      VARCHAR(255)  NULL DEFAULT NULL,
    multi_device_credential      TINYINT(1)    NOT NULL,
    transports                   VARCHAR(255)  NULL DEFAULT NULL,
    user_presence_credential     TINYINT(1)    NOT NULL,
    user_verifying_credential    TINYINT(1)    NOT NULL,
    credential_status_mapping_id VARCHAR(255)  NOT NULL,
    credential_status_rp_id      VARCHAR(255)  NOT NULL,
    user_rp_id                   VARCHAR(255)  NOT NULL,
    user_user_id                 VARCHAR(255)  NOT NULL,
    PRIMARY KEY (mapping_id, rp_id),
    CONSTRAINT fk_credential_status FOREIGN KEY (credential_status_mapping_id, credential_status_rp_id)
        REFERENCES credential_status(mapping_id, rp_id) ON DELETE CASCADE,
    CONSTRAINT fk_credential_user FOREIGN KEY (user_rp_id, user_user_id)
        REFERENCES users(rp_id, user_id) ON DELETE CASCADE
);

CREATE INDEX idx_credential_cid
    ON credential (rp_id, cid_index);

CREATE INDEX idx_credential_cid_single
    ON credential (cid_index);

CREATE INDEX idx_credential_rp_user
    ON credential (user_rp_id, user_user_id);

CREATE INDEX idx_credential_aaguid
    ON credential (aaguid);


-- ===========================================
-- Large Blob Table
-- ===========================================
CREATE TABLE IF NOT EXISTS large_blob (
    id                    BIGINT       AUTO_INCREMENT PRIMARY KEY,
    blob_data             LONGBLOB     NULL DEFAULT NULL,
    credential_mapping_id VARCHAR(255) NULL DEFAULT NULL,
    credential_rp_id      VARCHAR(255) NULL DEFAULT NULL,
    CONSTRAINT fk_large_blob_credential FOREIGN KEY (credential_mapping_id, credential_rp_id)
        REFERENCES credential(mapping_id, rp_id) ON DELETE CASCADE
);



-- ===========================================
-- passkey_admin 데이터베이스에 대한 테이블 생성
-- ===========================================
USE passkey_admin;

-- ===========================================
-- Users Table
-- ===========================================
CREATE TABLE IF NOT EXISTS users (
    username VARCHAR(255) COLLATE utf8mb4_general_ci NOT NULL PRIMARY KEY,
    password VARCHAR(255) COLLATE utf8mb4_general_ci NOT NULL,
    enabled  TINYINT(1)                              NOT NULL
);

-- ===========================================
-- Authorities Table
-- ===========================================
CREATE TABLE IF NOT EXISTS authorities (
    username  VARCHAR(255) COLLATE utf8mb4_general_ci NOT NULL,
    authority VARCHAR(255) COLLATE utf8mb4_general_ci NOT NULL,
    CONSTRAINT fk_authorities_users FOREIGN KEY (username) REFERENCES users(username) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS ix_auth_username
    ON authorities (username, authority);

-- ===========================================
-- Persistent Logins Table (Remember Me Feature)
-- ===========================================
CREATE TABLE IF NOT EXISTS persistent_logins (
    username  VARCHAR(64) NOT NULL,
    series    VARCHAR(64) PRIMARY KEY,
    token     VARCHAR(64) NOT NULL,
    last_used TIMESTAMP   NOT NULL
);

-- ===========================================
-- OAuth2 Authorized Client Table
-- ===========================================
CREATE TABLE IF NOT EXISTS oauth2_authorized_client (
    client_registration_id  VARCHAR(100)  NOT NULL,
    principal_name          VARCHAR(200)  NOT NULL,
    access_token_type       VARCHAR(100)  NOT NULL,
    access_token_value      BLOB          NOT NULL,
    access_token_issued_at  TIMESTAMP     NOT NULL,
    access_token_expires_at TIMESTAMP     NOT NULL,
    access_token_scopes     VARCHAR(1000) NULL DEFAULT NULL,
    refresh_token_value     BLOB          NULL DEFAULT NULL,
    refresh_token_issued_at TIMESTAMP     NULL DEFAULT NULL,
    created_at              TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (client_registration_id, principal_name)
);

-- ===========================================
-- Audit Event Logs Table
-- ===========================================
CREATE TABLE IF NOT EXISTS audit_event_logs (
    id             BIGINT       AUTO_INCREMENT PRIMARY KEY,
    category       VARCHAR(255) NOT NULL,
    type           varchar(255) NOT NULL,
    code           INT          NOT NULL,
    username       varchar(255) NOT NULL,
    authorities    VARCHAR(255) NULL DEFAULT NULL,
    user_agent     varchar(255) NULL DEFAULT NULL,
    remote_address VARCHAR(255) NULL DEFAULT NULL,
    session_id     VARCHAR(255) NULL DEFAULT NULL,
    http_method    VARCHAR(255) NULL DEFAULT NULL,
    request_uri    VARCHAR(255) NULL DEFAULT NULL,
    request_body   MEDIUMTEXT   NULL DEFAULT NULL,
    status         INT          NULL DEFAULT NULL,
    timestamp      DATETIME(6)  NOT NULL
);

CREATE INDEX IF NOT EXISTS username_index
    ON audit_event_logs (username);

CREATE INDEX IF NOT EXISTS category_index
    ON audit_event_logs (category);

CREATE INDEX IF NOT EXISTS type_index
    ON audit_event_logs (type);

CREATE INDEX IF NOT EXISTS remoteAddress_index
    ON audit_event_logs (remote_address);

CREATE INDEX IF NOT EXISTS timestamp_index
    ON audit_event_logs (timestamp);

