-- ===========================================
-- Credential Status Table
-- ===========================================
CREATE TABLE IF NOT EXISTS credential_status (
    mapping_id                 VARCHAR(255)  NOT NULL,
    rp_id                      VARCHAR(255)  NOT NULL,
    active                     BOOLEAN       NOT NULL,
    backup_state               BOOLEAN       NOT NULL,
    credential_id              VARCHAR(1500) NOT NULL,
    fail_count                 BIGINT        NOT NULL,
    last_authenticated         TIMESTAMP,
    last_authentication_failed TIMESTAMP,
    last_status_changed        TIMESTAMP,
    registration_date          TIMESTAMP,
    sign_count                 BIGINT        NOT NULL,
    success_count              BIGINT        NOT NULL,
    PRIMARY KEY (mapping_id, rp_id)
);

CREATE INDEX IF NOT EXISTS idx_credential_status_active
    ON credential_status (active);

CREATE INDEX IF NOT EXISTS idx_credential_status_registration_date
    ON credential_status (registration_date);

CREATE INDEX IF NOT EXISTS idx_credential_status_last_authenticated
    ON credential_status (last_authenticated);


-- ===========================================
-- Issued Options Table
-- ===========================================
CREATE TABLE IF NOT EXISTS issued_options (
    transaction_id       VARCHAR(255)   NOT NULL PRIMARY KEY,
    expire_time          TIMESTAMP,
    issue_time           TIMESTAMP,
    operation_type       VARCHAR(255),
    pub_key_cred_options VARCHAR(8192),
    rp_id                VARCHAR(255)   NOT NULL,
    user_id              VARCHAR(255)
);

CREATE INDEX IF NOT EXISTS idx_issued_options_time
    ON issued_options (issue_time, expire_time);


-- ===========================================
-- Metadata Table
-- ===========================================
CREATE TABLE IF NOT EXISTS metadata (
    id                         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    aaguid                     VARCHAR(255),
    certificate_key_id         VARCHAR(255),
    metadatablobentryjson      OID           NOT NULL,
    time_of_last_status_change DATE,
    type                       VARCHAR(255)
);

CREATE INDEX IF NOT EXISTS idx_metadata_aaguid
    ON metadata (aaguid);

CREATE INDEX IF NOT EXISTS idx_metadata_certificate_key_id
    ON metadata (certificate_key_id);


-- ===========================================
-- Metadata Version Table
-- ===========================================
CREATE TABLE IF NOT EXISTS metadata_version (
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    no           INTEGER   NOT NULL,
    next_update  DATE,
    metadatablob OID,
    last_checked TIMESTAMP,
    last_updated TIMESTAMP
);


-- ===========================================
-- Origin Table
-- ===========================================
CREATE TABLE IF NOT EXISTS origin (
    id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    origin VARCHAR(255) NOT NULL
);


-- ===========================================
-- Policy Table
-- ===========================================
CREATE TABLE IF NOT EXISTS policy (
    id                                  BIGINT        GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    acceptable_authenticators           VARCHAR(255),
    allow_certified_authenticators_only BOOLEAN,
    disallowed_authenticators           VARCHAR(255),
    enforce_attestation                 BOOLEAN,
    acceptable_attestation_types        VARCHAR(255)
);


-- ===========================================
-- RP (Relying Party) Table
-- ===========================================
CREATE TABLE IF NOT EXISTS rp (
    id                     VARCHAR(255) NOT NULL PRIMARY KEY,
    authentication_enabled BOOLEAN,
    name                   VARCHAR(255) NOT NULL,
    registration_enabled   BOOLEAN,
    policy_id              BIGINT,
    CONSTRAINT fk_rp_policy FOREIGN KEY (policy_id)
        REFERENCES policy(id) ON DELETE SET NULL
);


-- ===========================================
-- Default Options Table
-- ===========================================
CREATE TABLE IF NOT EXISTS default_options (
    id                                        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    creation_authenticator_attachment         VARCHAR(255),
    creation_resident_key                     VARCHAR(255),
    creation_timeout_for_uv_discouraged_in_ms BIGINT,
    creation_timeout_in_ms                    BIGINT,
    creation_user_verification                VARCHAR(255),
    request_timeout_for_uv_discouraged_in_ms  BIGINT,
    request_timeout_in_ms                     BIGINT,
    request_user_verification                 VARCHAR(255),
    rp_id                                     VARCHAR(255),
    CONSTRAINT fk_default_options_rp FOREIGN KEY (rp_id)
        REFERENCES rp(id) ON DELETE CASCADE
);


-- ===========================================
-- RP Origins Table
-- ===========================================
CREATE TABLE IF NOT EXISTS rp_origins (
    rp_id      VARCHAR(255) NOT NULL,
    origins_id BIGINT       NOT NULL UNIQUE,
    CONSTRAINT fk_rp_origins_rp FOREIGN KEY (rp_id) REFERENCES rp(id) ON DELETE CASCADE,
    CONSTRAINT fk_rp_origins_origin FOREIGN KEY (origins_id) REFERENCES origin(id) ON DELETE CASCADE
);


-- ===========================================
-- Users Table
-- ===========================================
CREATE TABLE IF NOT EXISTS users (
    rp_id                      VARCHAR(255) NOT NULL,
    user_id                    VARCHAR(255) NOT NULL,
    success_count              BIGINT,
    fail_count                 BIGINT,
    registration_date          TIMESTAMP,
    first_authenticated        TIMESTAMP,
    last_authenticated         TIMESTAMP,
    last_authentication_failed TIMESTAMP,
    PRIMARY KEY (rp_id, user_id)
);

CREATE INDEX IF NOT EXISTS users_registration_date_index
    ON users (registration_date);

CREATE INDEX IF NOT EXISTS users_last_authenticated_index
    ON users (last_authenticated);


-- ===========================================
-- Credential Table
-- ===========================================
CREATE TABLE IF NOT EXISTS credential (
    mapping_id                   VARCHAR(255)  NOT NULL,
    rp_id                        VARCHAR(255)  NOT NULL,
    aaguid                       VARCHAR(36),
    attestation_format           VARCHAR(255),
    attestation_type_in_used     VARCHAR(255),
    cid_index                    VARCHAR(32)   NOT NULL,
    cose_public_key              OID           NOT NULL,
    credential_id                VARCHAR(1500) NOT NULL,
    discoverable_credential      VARCHAR(255),
    multi_device_credential      BOOLEAN       NOT NULL,
    transports                   VARCHAR(255),
    user_presence_credential     BOOLEAN       NOT NULL,
    user_verifying_credential    BOOLEAN       NOT NULL,
    credential_status_mapping_id VARCHAR(255)  NOT NULL,
    credential_status_rp_id      VARCHAR(255)  NOT NULL,
    user_rp_id                   VARCHAR(255)  NOT NULL,
    user_user_id                 VARCHAR(255)  NOT NULL,
    PRIMARY KEY (mapping_id, rp_id),
    CONSTRAINT fk_credential_status FOREIGN KEY (credential_status_mapping_id, credential_status_rp_id)
        REFERENCES credential_status(mapping_id, rp_id) ON DELETE CASCADE,
    CONSTRAINT fk_credential_user FOREIGN KEY (user_rp_id, user_user_id)
        REFERENCES users(rp_id, user_id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_credential_cid
    ON credential (rp_id, cid_index);

CREATE INDEX IF NOT EXISTS idx_credential_cid_single
    ON credential (cid_index);

CREATE INDEX IF NOT EXISTS idx_credential_rp_user
    ON credential (user_rp_id, user_user_id);

CREATE INDEX IF NOT EXISTS idx_credential_aaguid
    ON credential (aaguid);


-- ===========================================
-- Large Blob Table
-- ===========================================
CREATE TABLE IF NOT EXISTS large_blob (
    id                    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    blob_data             OID,
    credential_mapping_id VARCHAR(255),
    credential_rp_id      VARCHAR(255),
    CONSTRAINT fk_large_blob_credential FOREIGN KEY (credential_mapping_id, credential_rp_id)
        REFERENCES credential(mapping_id, rp_id) ON DELETE CASCADE
);